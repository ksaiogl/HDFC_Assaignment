#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('qriusreactbackend:server');
var http = require('http');
var env = require('../Environment/env');
var hostDetails = require('../Environment/hostDetails');
var dbConfig = require('../Environment/mongoDatabase');
var log4js = require('../Environment/log4js');
var redisConfigFile = require('../Environment/redis');
var helpers = require('../routes/util/helpers');
var session = require('express-session');
var redisStore = require('connect-redis')(session);

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '5010');
var port = hostDetails.WHICH_HOST.port;
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server;
var app;

/**
 * Listen on provided port, on all network interfaces.
 */
dbConfig.createMongoConn((err, res) => {
  if (!err) {
    console.log(`Mongo Connection established`);
    redisConfigFile.createRedisConn(function (err) {
      if (!err) {
        app = require('../app');
        app.set('port', port);
        server = http.createServer(app);

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
      } else {
        console.log(`Error establishing Redis Connection,err: ${err.stack}`);
      }
    })
  } else {
    console.log(`Error establishing Mongo Connection,err: ${err.stack}`);
  }
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(err) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  if (!err) {
    console.log(`listening on ${bind}`);
  } else {
    console.log(`Error listening on ${bind},err: ${err.stack}`);
  }
}
